Gu.Roslyn.Asserts.Settings.AnalyzerConfig.get -> string?
Gu.Roslyn.Asserts.Settings.Settings(Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions! compilationOptions, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions! parseOptions, Gu.Roslyn.Asserts.MetadataReferencesCollection? metadataReferences, Gu.Roslyn.Asserts.AllowedCompilerDiagnostics allowedCompilerDiagnostics = Gu.Roslyn.Asserts.AllowedCompilerDiagnostics.None, string? analyzerConfiguration = null) -> void
Gu.Roslyn.Asserts.Settings.WithAnalyzerConfig(string! analyzerConfig) -> Gu.Roslyn.Asserts.Settings!
static Gu.Roslyn.Asserts.Analyze.GetAllDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, Microsoft.CodeAnalysis.Solution! solution) -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostic!>!
static Gu.Roslyn.Asserts.CodeFactory.AddAnalyzerConfig(Microsoft.CodeAnalysis.Solution! solution, string? analyzerConfig) -> Microsoft.CodeAnalysis.Solution!
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.Collections.Generic.IEnumerable<string!>! code, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions! parseOptions, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions! compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference!>? metadataReferences, string? analyzerConfig = null) -> Microsoft.CodeAnalysis.Solution!
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.IO.FileInfo! code, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions! parseOptions, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions! compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference!>? metadataReferences, string? analyzerConfig = null) -> Microsoft.CodeAnalysis.Solution!
static Gu.Roslyn.Asserts.CsharpCompilationOptionsExtensions.WithSuppressableAsError(this Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions! options, params Microsoft.CodeAnalysis.SuppressionDescriptor![]! descriptors) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions!
static Gu.Roslyn.Asserts.CsharpCompilationOptionsExtensions.WithSuppressableAsError(this Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions! options, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SuppressionDescriptor!>! descriptors) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions!
static Gu.Roslyn.Asserts.DiagnosticsAndSources.FromMarkup(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, string! markup) -> Gu.Roslyn.Asserts.DiagnosticsAndSources!
static Gu.Roslyn.Asserts.DiagnosticsAndSources.FromMarkup(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, System.Collections.Generic.IReadOnlyList<string!>! markup) -> Gu.Roslyn.Asserts.DiagnosticsAndSources!
static Gu.Roslyn.Asserts.ExpectedDiagnostic.Create(Microsoft.CodeAnalysis.SuppressionDescriptor! descriptor) -> Gu.Roslyn.Asserts.ExpectedDiagnostic!
static Gu.Roslyn.Asserts.RoslynAssert.NotSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, Gu.Roslyn.Asserts.ExpectedDiagnostic! expectedDiagnostic, string! code, Gu.Roslyn.Asserts.Settings? settings = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NotSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, string! code, Gu.Roslyn.Asserts.Settings? settings = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Suppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, Gu.Roslyn.Asserts.DiagnosticsAndSources! diagnosticsAndSources, Gu.Roslyn.Asserts.Settings? settings = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Suppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, Gu.Roslyn.Asserts.ExpectedDiagnostic! expectedDiagnostic, params string![]! code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Suppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, Gu.Roslyn.Asserts.ExpectedDiagnostic! expectedDiagnostic, string! code, Gu.Roslyn.Asserts.Settings? settings = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Suppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, Gu.Roslyn.Asserts.ExpectedDiagnostic! expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string!>! code, Gu.Roslyn.Asserts.Settings? settings = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Suppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, params string![]! code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Suppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, string! code, Gu.Roslyn.Asserts.Settings? settings = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Suppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic!>! expectedDiagnostics, params string![]! code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Suppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor! suppressor, System.Collections.Generic.IReadOnlyList<string!>! code, Gu.Roslyn.Asserts.Settings? settings = null) -> void
