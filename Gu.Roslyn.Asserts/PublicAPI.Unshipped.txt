Gu.Roslyn.Asserts.DiagnosticAssert
Gu.Roslyn.Asserts.DiagnosticAssert.Valid(params string[] code) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert
Gu.Roslyn.Asserts.DiagnosticFixAssert.CodeFix(Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.CodeFix(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, Microsoft.CodeAnalysis.Solution solution, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.CodeFix(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.CodeFix(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.CodeFix(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.CodeFix(System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.CodeFix(System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.CodeFix(string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.FixAll(System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.FixAll(System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.NoFix(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, params string[] code) -> void
Gu.Roslyn.Asserts.DiagnosticFixAssert.NoFix(params string[] code) -> void
Gu.Roslyn.Asserts.FixAssert
Gu.Roslyn.Asserts.FixAssert.CodeFix(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.FixAssert.CodeFix(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.FixAssert.CodeFix(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.FixAssert.CodeFix(System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.FixAssert.CodeFix(System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.FixAssert.CodeFix(string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.FixAssert.FixAll(System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
Gu.Roslyn.Asserts.FixAssert.FixAll(System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Create<TDiagnosticAnalyzer, TCodeFixProvider>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic = null) -> Gu.Roslyn.Asserts.DiagnosticFixAssert
static Gu.Roslyn.Asserts.RoslynAssert.Create<TDiagnosticAnalyzer>(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor = null) -> Gu.Roslyn.Asserts.DiagnosticAssert
static Gu.Roslyn.Asserts.RoslynAssert.CreateWithoutAnalyzer<TCodeFixProvider>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic) -> Gu.Roslyn.Asserts.FixAssert