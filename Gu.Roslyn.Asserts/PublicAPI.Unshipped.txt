Gu.Roslyn.Asserts.SyntaxFactoryWriter.SyntaxFactoryWriter() -> void
override Gu.Roslyn.Asserts.SyntaxFactoryWriter.ToString() -> string
static Gu.Roslyn.Asserts.RoslynAssert.Ast<T>(T expected, T actual) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string code, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, Microsoft.CodeAnalysis.Solution solution, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IReadOnlyList<string> fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string code, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> codeWithErrorsIndicated, System.Collections.Generic.IReadOnlyList<string> fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> codeWithErrorsIndicated, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, string codeWithErrorsIndicated, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider codeFix, string codeWithErrorsIndicated, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllByScope(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider codeFix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IReadOnlyList<string> fixedCode, string fixTitle, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors, Microsoft.CodeAnalysis.CodeFixes.FixAllScope scope) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllByScope(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider codeFix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IReadOnlyList<string> fixedCode, string fixTitle, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors, Microsoft.CodeAnalysis.CodeFixes.FixAllScope scope) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllByScope(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider codeFix, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IReadOnlyList<string> fixedCode, string fixTitle, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors, Microsoft.CodeAnalysis.CodeFixes.FixAllScope scope) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllInDocument(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider codeFix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string code, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllInDocument(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider codeFix, string codeWithErrorsIndicated, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider codeFix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string code, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider codeFix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string code, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider codeFix, string codeWithErrorsIndicated, string fixedCode, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.SyntaxFactoryWriter.Serialize(Microsoft.CodeAnalysis.SyntaxNode node) -> string
static Gu.Roslyn.Asserts.SyntaxFactoryWriter.Serialize(string code) -> string