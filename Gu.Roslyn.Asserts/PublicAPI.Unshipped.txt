Gu.Roslyn.Asserts.SyntaxFactoryWriter.SyntaxFactoryWriter() -> void
override Gu.Roslyn.Asserts.SyntaxFactoryWriter.ToString() -> string
static Gu.Roslyn.Asserts.Analyze.GetFixableDiagnosticsAsync(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostic>>
static Gu.Roslyn.Asserts.Fix.Apply(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Microsoft.CodeAnalysis.Diagnostic diagnostic, string fixTitle = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.Fix.Apply(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>> diagnostics, string fixTitle = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.Fix.ApplyAsync(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Microsoft.CodeAnalysis.Diagnostic diagnostic, string fixTitle = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Solution>
static Gu.Roslyn.Asserts.RoslynAssert.Ast<T>(T expected, T actual) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, string fixedCode, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, Microsoft.CodeAnalysis.Solution solution, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, string code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(string codeWithErrorsIndicated, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllByScope(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, Microsoft.CodeAnalysis.CodeFixes.FixAllScope scope, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllByScope(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IReadOnlyList<string> after, Microsoft.CodeAnalysis.CodeFixes.FixAllScope scope, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllByScope(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, Microsoft.CodeAnalysis.CodeFixes.FixAllScope scope, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllInDocument(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllInDocument(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllInDocument<TAnalyzer, TCodeFix>(string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string code, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne<TAnalyzer, TCodeFix>(string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic> expectedDiagnostics, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, string code, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(System.Type analyzerType, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(System.Type analyzerType, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<string> suppressedDiagnostics = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.SyntaxFactoryWriter.Serialize(Microsoft.CodeAnalysis.SyntaxNode node) -> string
static Gu.Roslyn.Asserts.SyntaxFactoryWriter.Serialize(string code) -> string