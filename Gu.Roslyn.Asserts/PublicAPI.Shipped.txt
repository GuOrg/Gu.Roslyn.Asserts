Gu.Roslyn.Asserts.AllowCompilationErrors
Gu.Roslyn.Asserts.AllowCompilationErrors.No = 0 -> Gu.Roslyn.Asserts.AllowCompilationErrors
Gu.Roslyn.Asserts.AllowCompilationErrors.Yes = 1 -> Gu.Roslyn.Asserts.AllowCompilationErrors
Gu.Roslyn.Asserts.AllowedDiagnostics
Gu.Roslyn.Asserts.AllowedDiagnostics.None = 1 -> Gu.Roslyn.Asserts.AllowedDiagnostics
Gu.Roslyn.Asserts.AllowedDiagnostics.Warnings = 0 -> Gu.Roslyn.Asserts.AllowedDiagnostics
Gu.Roslyn.Asserts.AllowedDiagnostics.WarningsAndErrors = 2 -> Gu.Roslyn.Asserts.AllowedDiagnostics
Gu.Roslyn.Asserts.AllowedDiagnosticsAttribute
Gu.Roslyn.Asserts.AllowedDiagnosticsAttribute.AllowedDiagnostics.get -> Gu.Roslyn.Asserts.AllowedDiagnostics
Gu.Roslyn.Asserts.AllowedDiagnosticsAttribute.AllowedDiagnosticsAttribute(Gu.Roslyn.Asserts.AllowedDiagnostics allowedDiagnostics) -> void
Gu.Roslyn.Asserts.Analyze
Gu.Roslyn.Asserts.AssertException
Gu.Roslyn.Asserts.AssertException.AssertException(string message) -> void
Gu.Roslyn.Asserts.AssertException.AssertException(string message, System.Exception innerException) -> void
Gu.Roslyn.Asserts.AstFormat
Gu.Roslyn.Asserts.AstFormat.Json = 1 -> Gu.Roslyn.Asserts.AstFormat
Gu.Roslyn.Asserts.AstFormat.Light = 0 -> Gu.Roslyn.Asserts.AstFormat
Gu.Roslyn.Asserts.AstTrivia
Gu.Roslyn.Asserts.AstTrivia.Ignore = 4 -> Gu.Roslyn.Asserts.AstTrivia
Gu.Roslyn.Asserts.AstTrivia.Node = 2 -> Gu.Roslyn.Asserts.AstTrivia
Gu.Roslyn.Asserts.AstTrivia.Token = 1 -> Gu.Roslyn.Asserts.AstTrivia
Gu.Roslyn.Asserts.AstTrivia.Unspecified = 0 -> Gu.Roslyn.Asserts.AstTrivia
Gu.Roslyn.Asserts.AstWriter
Gu.Roslyn.Asserts.AstWriterSettings
Gu.Roslyn.Asserts.AstWriterSettings.AstWriterSettings(Gu.Roslyn.Asserts.AstFormat format, Gu.Roslyn.Asserts.AstTrivia trivia, bool ignoreEmptyTriva) -> void
Gu.Roslyn.Asserts.AstWriterSettings.Format.get -> Gu.Roslyn.Asserts.AstFormat
Gu.Roslyn.Asserts.AstWriterSettings.IgnoreEmptyTriva.get -> bool
Gu.Roslyn.Asserts.AstWriterSettings.Trivia.get -> Gu.Roslyn.Asserts.AstTrivia
Gu.Roslyn.Asserts.Benchmark
Gu.Roslyn.Asserts.Benchmark.Analyzer.get -> Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
Gu.Roslyn.Asserts.Benchmark.CodeBlockActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext>>
Gu.Roslyn.Asserts.Benchmark.CodeBlockStartActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.IContextAndAction>
Gu.Roslyn.Asserts.Benchmark.CompilationActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext>>
Gu.Roslyn.Asserts.Benchmark.CompilationStartActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext>>
Gu.Roslyn.Asserts.Benchmark.ContextAndAction<TContext>
Gu.Roslyn.Asserts.Benchmark.ContextAndAction<TContext>.Action.get -> System.Action<TContext>
Gu.Roslyn.Asserts.Benchmark.ContextAndAction<TContext>.Context.get -> TContext
Gu.Roslyn.Asserts.Benchmark.ContextAndAction<TContext>.ContextAndAction(TContext context, System.Action<TContext> action) -> void
Gu.Roslyn.Asserts.Benchmark.ContextAndAction<TContext>.Run() -> void
Gu.Roslyn.Asserts.Benchmark.IContextAndAction
Gu.Roslyn.Asserts.Benchmark.IContextAndAction.Run() -> void
Gu.Roslyn.Asserts.Benchmark.OperationActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext>>
Gu.Roslyn.Asserts.Benchmark.OperationBlockActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext>>
Gu.Roslyn.Asserts.Benchmark.OperationBlockStartActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext>>
Gu.Roslyn.Asserts.Benchmark.Run() -> void
Gu.Roslyn.Asserts.Benchmark.SemanticModelActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext>>
Gu.Roslyn.Asserts.Benchmark.SymbolActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext>>
Gu.Roslyn.Asserts.Benchmark.SyntaxNodeActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext>>
Gu.Roslyn.Asserts.Benchmark.SyntaxTreeActions.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.Benchmark.ContextAndAction<Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext>>
Gu.Roslyn.Asserts.CodeAssert
Gu.Roslyn.Asserts.CodeComparer
Gu.Roslyn.Asserts.CodeFactory
Gu.Roslyn.Asserts.CodeReader
Gu.Roslyn.Asserts.DiagnosticsAndSources
Gu.Roslyn.Asserts.DiagnosticsAndSources.Code.get -> System.Collections.Generic.IReadOnlyList<string>
Gu.Roslyn.Asserts.DiagnosticsAndSources.DiagnosticsAndSources(System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic> expectedDiagnostics, System.Collections.Generic.IReadOnlyList<string> code) -> void
Gu.Roslyn.Asserts.DiagnosticsAndSources.ExpectedDiagnostics.get -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic>
Gu.Roslyn.Asserts.ExpectedDiagnostic
Gu.Roslyn.Asserts.ExpectedDiagnostic.Analyzer.get -> Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
Gu.Roslyn.Asserts.ExpectedDiagnostic.ExpectedDiagnostic(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.FileLinePositionSpan span) -> void
Gu.Roslyn.Asserts.ExpectedDiagnostic.ExpectedDiagnostic(string id, string message, Microsoft.CodeAnalysis.FileLinePositionSpan span) -> void
Gu.Roslyn.Asserts.ExpectedDiagnostic.HasPath.get -> bool
Gu.Roslyn.Asserts.ExpectedDiagnostic.HasPosition.get -> bool
Gu.Roslyn.Asserts.ExpectedDiagnostic.Id.get -> string
Gu.Roslyn.Asserts.ExpectedDiagnostic.Matches(Microsoft.CodeAnalysis.Diagnostic actual) -> bool
Gu.Roslyn.Asserts.ExpectedDiagnostic.Message.get -> string
Gu.Roslyn.Asserts.ExpectedDiagnostic.MessageMatches(Microsoft.CodeAnalysis.Diagnostic actual) -> bool
Gu.Roslyn.Asserts.ExpectedDiagnostic.PositionMatches(Microsoft.CodeAnalysis.Diagnostic actual) -> bool
Gu.Roslyn.Asserts.ExpectedDiagnostic.Span.get -> Microsoft.CodeAnalysis.FileLinePositionSpan
Gu.Roslyn.Asserts.ExpectedDiagnostic.WithMessage(string message) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
Gu.Roslyn.Asserts.ExpectedDiagnostic.WithPosition(Microsoft.CodeAnalysis.FileLinePositionSpan span) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
Gu.Roslyn.Asserts.ExpectedDiagnostic.WithPositionFromCodeWithErrorsIndicated(string codeWithErrorsIndicated, out string cleanedSources) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
Gu.Roslyn.Asserts.Fix
Gu.Roslyn.Asserts.Gac
Gu.Roslyn.Asserts.IgnoredErrorsAttribute
Gu.Roslyn.Asserts.IgnoredErrorsAttribute.ErrorIds.get -> System.Collections.Generic.IReadOnlyList<string>
Gu.Roslyn.Asserts.IgnoredErrorsAttribute.IgnoredErrorsAttribute(params string[] errorIds) -> void
Gu.Roslyn.Asserts.MetadataReferenceAttribute
Gu.Roslyn.Asserts.MetadataReferenceAttribute.Aliases.get -> System.Collections.Generic.IReadOnlyList<string>
Gu.Roslyn.Asserts.MetadataReferenceAttribute.MetadataReference.get -> Microsoft.CodeAnalysis.MetadataReference
Gu.Roslyn.Asserts.MetadataReferenceAttribute.MetadataReferenceAttribute(System.Type type) -> void
Gu.Roslyn.Asserts.MetadataReferenceAttribute.MetadataReferenceAttribute(System.Type type, string[] aliases) -> void
Gu.Roslyn.Asserts.MetadataReferenceAttribute.Type.get -> System.Type
Gu.Roslyn.Asserts.MetadataReferences
Gu.Roslyn.Asserts.MetadataReferencesAttribute
Gu.Roslyn.Asserts.MetadataReferencesAttribute.MetadataReferences.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference>
Gu.Roslyn.Asserts.MetadataReferencesAttribute.MetadataReferencesAttribute(params System.Type[] types) -> void
Gu.Roslyn.Asserts.MetadataReferencesCollection
Gu.Roslyn.Asserts.MetadataReferencesCollection.Add(Microsoft.CodeAnalysis.MetadataReference item) -> bool
Gu.Roslyn.Asserts.MetadataReferencesCollection.AddRange(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> items) -> void
Gu.Roslyn.Asserts.MetadataReferencesCollection.Clear() -> void
Gu.Roslyn.Asserts.MetadataReferencesCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.CodeAnalysis.MetadataReference>
Gu.Roslyn.Asserts.MetadataReferencesCollection.MetadataReferencesCollection() -> void
Gu.Roslyn.Asserts.MetadataReferencesCollection.MetadataReferencesCollection(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> list) -> void
Gu.Roslyn.Asserts.PlaceholderAnalyzer
Gu.Roslyn.Asserts.PlaceholderAnalyzer.PlaceholderAnalyzer(string id) -> void
Gu.Roslyn.Asserts.ProjectFile
Gu.Roslyn.Asserts.Refactor
Gu.Roslyn.Asserts.ReferenceAssembly
Gu.Roslyn.Asserts.RoslynAssert
Gu.Roslyn.Asserts.SolutionFile
Gu.Roslyn.Asserts.StringHelper
Gu.Roslyn.Asserts.SuppressWarnings
Gu.Roslyn.Asserts.SuppressWarningsAttribute
Gu.Roslyn.Asserts.SuppressWarningsAttribute.Ids.get -> System.Collections.Generic.IReadOnlyList<string>
Gu.Roslyn.Asserts.SuppressWarningsAttribute.SuppressWarningsAttribute(params string[] ids) -> void
Gu.Roslyn.Asserts.SyntaxFactoryWriter
Gu.Roslyn.Asserts.SyntaxFactoryWriter.SyntaxFactoryWriter() -> void
Gu.Roslyn.Asserts.SyntaxNodeExt
Gu.Roslyn.Asserts.TextAssert
Gu.Roslyn.Asserts.TransitiveMetadataReferencesAttribute
Gu.Roslyn.Asserts.TransitiveMetadataReferencesAttribute.MetadataReferences.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference>
Gu.Roslyn.Asserts.TransitiveMetadataReferencesAttribute.TransitiveMetadataReferencesAttribute(params System.Type[] types) -> void
override Gu.Roslyn.Asserts.AssertException.ToString() -> string
override Gu.Roslyn.Asserts.AstWriter.ToString() -> string
override Gu.Roslyn.Asserts.Benchmark.ToString() -> string
override Gu.Roslyn.Asserts.PlaceholderAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext context) -> void
override Gu.Roslyn.Asserts.PlaceholderAnalyzer.SupportedDiagnostics.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.DiagnosticDescriptor>
override Gu.Roslyn.Asserts.SyntaxFactoryWriter.ToString() -> string
static Gu.Roslyn.Asserts.Analyze.GetDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.Solution solution) -> System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> sources, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnostics(Microsoft.CodeAnalysis.Project project, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer) -> System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnostics(Microsoft.CodeAnalysis.Solution solution) -> System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnostics(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer) -> System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> sources, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> sources, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.IO.FileInfo code, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Project project, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Solution solution) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnosticsAsync(System.Type analyzerType, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>>
static Gu.Roslyn.Asserts.Analyze.GetDiagnosticsAsync<TAnalyzer>(System.IO.FileInfo code, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> references) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>>
static Gu.Roslyn.Asserts.Analyze.GetFixableDiagnosticsAsync(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostic>>
static Gu.Roslyn.Asserts.AstWriter.Serialize(Microsoft.CodeAnalysis.SyntaxNode node, Gu.Roslyn.Asserts.AstWriterSettings settings = null) -> string
static Gu.Roslyn.Asserts.Benchmark.Create(Microsoft.CodeAnalysis.Project project, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer) -> Gu.Roslyn.Asserts.Benchmark
static Gu.Roslyn.Asserts.Benchmark.Create(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer) -> Gu.Roslyn.Asserts.Benchmark
static Gu.Roslyn.Asserts.Benchmark.CreateAsync(Microsoft.CodeAnalysis.Project project, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer) -> System.Threading.Tasks.Task<Gu.Roslyn.Asserts.Benchmark>
static Gu.Roslyn.Asserts.Benchmark.CreateAsync(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer) -> System.Threading.Tasks.Task<Gu.Roslyn.Asserts.Benchmark>
static Gu.Roslyn.Asserts.CodeAssert.AreEqual(Microsoft.CodeAnalysis.Document expected, Microsoft.CodeAnalysis.Document actual) -> void
static Gu.Roslyn.Asserts.CodeAssert.AreEqual(Microsoft.CodeAnalysis.Document expected, string actual) -> void
static Gu.Roslyn.Asserts.CodeAssert.AreEqual(string expected, Microsoft.CodeAnalysis.Document actual) -> void
static Gu.Roslyn.Asserts.CodeAssert.AreEqual(string expected, string actual) -> void
static Gu.Roslyn.Asserts.CodeComparer.Equals(System.Collections.Generic.IReadOnlyList<string> xs, System.Collections.Generic.IReadOnlyList<string> ys) -> bool
static Gu.Roslyn.Asserts.CodeComparer.Equals(string x, string y) -> bool
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.Collections.Generic.IEnumerable<string> code, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.LanguageVersion languageVersion = Microsoft.CodeAnalysis.CSharp.LanguageVersion.Latest) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.Collections.Generic.IReadOnlyList<string> code, params Microsoft.CodeAnalysis.MetadataReference[] metadataReferences) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.IO.FileInfo code, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.IO.FileInfo code, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.IO.FileInfo code, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.IO.FileInfo code, System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(System.Uri githubUrl, System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(string code, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(string code, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(string code, System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolution(string code, params Microsoft.CodeAnalysis.MetadataReference[] metadataReferences) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolutionWithOneProject(System.Collections.Generic.IEnumerable<string> code, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolutionWithOneProject(System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolutionWithOneProject(string code, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSolutionWithOneProject(string code, System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.CodeFactory.CreateSpecificDiagnosticOptions(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IEnumerable<string> suppressed) -> System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>>
static Gu.Roslyn.Asserts.CodeFactory.CreateSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DiagnosticDescriptor> enabled, System.Collections.Generic.IEnumerable<string> suppressed) -> System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>>
static Gu.Roslyn.Asserts.CodeFactory.CreateSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, System.Collections.Generic.IEnumerable<string> suppressed) -> System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>>
static Gu.Roslyn.Asserts.CodeFactory.DefaultCompilationOptions(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.Collections.Generic.IEnumerable<string> suppressed = null) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
static Gu.Roslyn.Asserts.CodeFactory.DefaultCompilationOptions(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IEnumerable<string> suppressWarnings) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
static Gu.Roslyn.Asserts.CodeFactory.DefaultCompilationOptions(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.Collections.Generic.IEnumerable<string> suppressWarnings) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
static Gu.Roslyn.Asserts.CodeFactory.DefaultCompilationOptions(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IEnumerable<string> suppressed = null) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
static Gu.Roslyn.Asserts.CodeFactory.DefaultCompilationOptions(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic> expectedDiagnostics, System.Collections.Generic.IEnumerable<string> suppressWarnings) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
static Gu.Roslyn.Asserts.CodeFactory.DefaultCompilationOptions(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.DiagnosticDescriptor> descriptors, System.Collections.Generic.IEnumerable<string> suppressWarnings) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
static Gu.Roslyn.Asserts.CodeFactory.DefaultCompilationOptions(System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.DiagnosticDescriptor> descriptors, System.Collections.Generic.IEnumerable<string> suppressed = null) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
static Gu.Roslyn.Asserts.CodeFactory.DefaultCompilationOptions(System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, System.Collections.Generic.IEnumerable<string> suppressed = null) -> Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
static Gu.Roslyn.Asserts.CodeFactory.TryFindFileInParentDirectory(System.IO.DirectoryInfo directory, string fileName, out System.IO.FileInfo result) -> bool
static Gu.Roslyn.Asserts.CodeReader.AreEqual(System.Collections.Generic.IReadOnlyList<string> xs, System.Collections.Generic.IReadOnlyList<string> ys) -> bool
static Gu.Roslyn.Asserts.CodeReader.AreEqual(string x, string y) -> bool
static Gu.Roslyn.Asserts.CodeReader.FileName(string code) -> string
static Gu.Roslyn.Asserts.CodeReader.FindLinePositions(string code) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Text.LinePosition>
static Gu.Roslyn.Asserts.CodeReader.GetCode(this Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxAnnotation format) -> string
static Gu.Roslyn.Asserts.CodeReader.GetLineWithErrorIndicated(string code, Microsoft.CodeAnalysis.Text.LinePosition position) -> string
static Gu.Roslyn.Asserts.CodeReader.Namespace(string code) -> string
static Gu.Roslyn.Asserts.CodeReader.TryGetFileName(string code, out string fileName) -> bool
static Gu.Roslyn.Asserts.DiagnosticsAndSources.Create(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code) -> Gu.Roslyn.Asserts.DiagnosticsAndSources
static Gu.Roslyn.Asserts.DiagnosticsAndSources.Create(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string code) -> Gu.Roslyn.Asserts.DiagnosticsAndSources
static Gu.Roslyn.Asserts.DiagnosticsAndSources.CreateFromCodeWithErrorsIndicated(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.Collections.Generic.IReadOnlyList<string> code) -> Gu.Roslyn.Asserts.DiagnosticsAndSources
static Gu.Roslyn.Asserts.DiagnosticsAndSources.CreateFromCodeWithErrorsIndicated(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> code) -> Gu.Roslyn.Asserts.DiagnosticsAndSources
static Gu.Roslyn.Asserts.DiagnosticsAndSources.CreateFromCodeWithErrorsIndicated(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, string code) -> Gu.Roslyn.Asserts.DiagnosticsAndSources
static Gu.Roslyn.Asserts.DiagnosticsAndSources.CreateFromCodeWithErrorsIndicated(string analyzerId, string message, System.Collections.Generic.IReadOnlyList<string> code) -> Gu.Roslyn.Asserts.DiagnosticsAndSources
static Gu.Roslyn.Asserts.ExpectedDiagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
static Gu.Roslyn.Asserts.ExpectedDiagnostic.Create(string diagnosticId) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
static Gu.Roslyn.Asserts.ExpectedDiagnostic.Create(string diagnosticId, int line, int character) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
static Gu.Roslyn.Asserts.ExpectedDiagnostic.Create(string diagnosticId, string message) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
static Gu.Roslyn.Asserts.ExpectedDiagnostic.Create(string diagnosticId, string message, int line, int character) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
static Gu.Roslyn.Asserts.ExpectedDiagnostic.Create(string diagnosticId, string message, string path, int line, int character) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
static Gu.Roslyn.Asserts.ExpectedDiagnostic.CreateFromCodeWithErrorsIndicated(string diagnosticId, string code, out string cleanedSources) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
static Gu.Roslyn.Asserts.ExpectedDiagnostic.CreateFromCodeWithErrorsIndicated(string diagnosticId, string message, string code, out string cleanedSources) -> Gu.Roslyn.Asserts.ExpectedDiagnostic
static Gu.Roslyn.Asserts.ExpectedDiagnostic.CreateManyFromCodeWithErrorsIndicated(string diagnosticId, string message, string codeWithErrorsIndicated, out string cleanedSources) -> System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic>
static Gu.Roslyn.Asserts.Fix.Apply(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Microsoft.CodeAnalysis.Diagnostic diagnostic, string fixTitle = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.Fix.Apply(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>> diagnostics, string fixTitle = null) -> Microsoft.CodeAnalysis.Solution
static Gu.Roslyn.Asserts.Fix.ApplyAsync(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Microsoft.CodeAnalysis.Diagnostic diagnostic, string fixTitle = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Solution>
static Gu.Roslyn.Asserts.Gac.TryGet(string name, out Microsoft.CodeAnalysis.MetadataReference metadataReference) -> bool
static Gu.Roslyn.Asserts.MetadataReferences.CreateBinary(params string[] code) -> Microsoft.CodeAnalysis.MetadataReference
static Gu.Roslyn.Asserts.MetadataReferences.CreateFromAssembly(System.Reflection.Assembly assembly) -> Microsoft.CodeAnalysis.MetadataReference
static Gu.Roslyn.Asserts.MetadataReferences.CreateFromFile(string assemblyFile) -> Microsoft.CodeAnalysis.MetadataReference
static Gu.Roslyn.Asserts.MetadataReferences.FromAttributes() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference>
static Gu.Roslyn.Asserts.MetadataReferences.Transitive(params System.Reflection.Assembly[] assemblies) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference>
static Gu.Roslyn.Asserts.MetadataReferences.Transitive(params System.Type[] typesInAssemblies) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference>
static Gu.Roslyn.Asserts.ProjectFile.Find(string projectFile) -> System.IO.FileInfo
static Gu.Roslyn.Asserts.ProjectFile.ParseInfo(System.IO.FileInfo csproj) -> Microsoft.CodeAnalysis.ProjectInfo
static Gu.Roslyn.Asserts.ProjectFile.TryFind(System.IO.FileInfo dllFile, out System.IO.FileInfo result) -> bool
static Gu.Roslyn.Asserts.ProjectFile.TryFind(string projectFile, out System.IO.FileInfo result) -> bool
static Gu.Roslyn.Asserts.Refactor.Apply(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string testCode, Microsoft.CodeAnalysis.Text.TextSpan span, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Document
static Gu.Roslyn.Asserts.Refactor.Apply(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string testCode, Microsoft.CodeAnalysis.Text.TextSpan span, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Document
static Gu.Roslyn.Asserts.Refactor.Apply(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string testCode, Microsoft.CodeAnalysis.Text.TextSpan span, string title, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Document
static Gu.Roslyn.Asserts.Refactor.Apply(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string testCode, int position, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Document
static Gu.Roslyn.Asserts.Refactor.Apply(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string testCode, int position, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Document
static Gu.Roslyn.Asserts.Refactor.Apply(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string testCode, int position, string title, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null) -> Microsoft.CodeAnalysis.Document
static Gu.Roslyn.Asserts.Refactor.CodeActions(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string testCode, Microsoft.CodeAnalysis.Text.TextSpan span, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CodeActions.CodeAction>
static Gu.Roslyn.Asserts.Refactor.CodeActions(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string testCode, int position, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CodeActions.CodeAction>
static Gu.Roslyn.Asserts.ReferenceAssembly.Directory.get -> System.IO.DirectoryInfo
static Gu.Roslyn.Asserts.ReferenceAssembly.Directory.set -> void
static Gu.Roslyn.Asserts.ReferenceAssembly.TryGet(System.Reflection.Assembly assembly, out Microsoft.CodeAnalysis.MetadataReference metadataReference) -> bool
static Gu.Roslyn.Asserts.ReferenceAssembly.TryGet(string name, out Microsoft.CodeAnalysis.MetadataReference metadataReference) -> bool
static Gu.Roslyn.Asserts.RoslynAssert.AddTransitiveMetadataReferences(System.Reflection.Assembly assembly) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Ast<T>(T expected, T actual) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, string after, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, Microsoft.CodeAnalysis.Solution solution, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TAnalyzer, TCodeFix>(System.Collections.Generic.IReadOnlyList<string> codeWithErrorsIndicated, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TAnalyzer, TCodeFix>(string codeWithErrorsIndicated, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.CodeFix<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic> expectedDiagnostics, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, string code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(System.Type analyzerType, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(System.Type analyzerType, System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic> expectedDiagnostics, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics(System.Type analyzerType, params string[] codeWithErrorsIndicated) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics<TAnalyzer>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics<TAnalyzer>(System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic> expectedDiagnostics, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Diagnostics<TAnalyzer>(params string[] codeWithErrorsIndicated) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TAnalyzer, TCodeFix>(string codeWithErrorsIndicated, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAll<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllByScope(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, Microsoft.CodeAnalysis.CodeFixes.FixAllScope scope, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllByScope(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, Microsoft.CodeAnalysis.CodeFixes.FixAllScope scope, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllByScope(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> before, System.Collections.Generic.IReadOnlyList<string> after, Microsoft.CodeAnalysis.CodeFixes.FixAllScope scope, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllInDocument(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllInDocument(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllInDocument<TAnalyzer, TCodeFix>(string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.FixAllOneByOne<TAnalyzer, TCodeFix>(string before, string after, string fixTitle = null, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.Collections.Generic.IReadOnlyList<string> code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.IO.FileInfo code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.Solution solution) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.DiagnosticDescriptor> descriptors, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> code, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.IO.FileInfo code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.IO.FileInfo code, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, string code, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(System.Type analyzerType, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.IO.FileInfo code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(System.Type analyzerType, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(System.Type analyzerType, Microsoft.CodeAnalysis.Solution solution) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(System.Type analyzerType, System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.DiagnosticDescriptor> descriptors, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(System.Type analyzerType, System.IO.FileInfo code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics(System.Type analyzerType, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics<TAnalyzer>(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.IO.FileInfo code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics<TAnalyzer>(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics<TAnalyzer>(Microsoft.CodeAnalysis.Solution solution) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics<TAnalyzer>(System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.DiagnosticDescriptor> descriptors, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics<TAnalyzer>(System.IO.FileInfo code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoAnalyzerDiagnostics<TAnalyzer>(params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoCompilerErrors(Microsoft.CodeAnalysis.Solution solution) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoCompilerErrors(Microsoft.CodeAnalysis.Solution solution, System.Collections.Generic.IReadOnlyList<string> allowedIds, Gu.Roslyn.Asserts.AllowedDiagnostics allowedDiagnostics) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoCompilerErrors(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoCompilerErrors(params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoDiagnostics(System.Collections.Generic.IReadOnlyList<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>> diagnostics) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.DiagnosticsAndSources diagnosticsAndSources, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, System.Collections.Generic.IReadOnlyList<string> code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, string code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<Gu.Roslyn.Asserts.ExpectedDiagnostic> expectedDiagnostics, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, System.Collections.Generic.IReadOnlyList<string> code, Gu.Roslyn.Asserts.AllowCompilationErrors allowCompilationErrors = Gu.Roslyn.Asserts.AllowCompilationErrors.No, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fix, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix<TAnalyzer, TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix<TAnalyzer, TCodeFix>(System.Collections.Generic.IReadOnlyList<string> codeWithErrorsIndicated) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix<TAnalyzer, TCodeFix>(params string[] codeWithErrorsIndicated) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoFix<TCodeFix>(Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoRefactoring(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoRefactoring(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string code, Microsoft.CodeAnalysis.Text.TextSpan span) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoRefactoring(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string code, Microsoft.CodeAnalysis.Text.TextSpan span, string title) -> void
static Gu.Roslyn.Asserts.RoslynAssert.NoRefactoring(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string code, string title) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Refactoring(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string before, Microsoft.CodeAnalysis.Text.TextSpan span, string after) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Refactoring(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string before, Microsoft.CodeAnalysis.Text.TextSpan span, string after, string title) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Refactoring(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string before, string after) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Refactoring(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider refactoring, string before, string after, string title) -> void
static Gu.Roslyn.Asserts.RoslynAssert.ResetAll() -> void
static Gu.Roslyn.Asserts.RoslynAssert.ResetMetadataReferences() -> void
static Gu.Roslyn.Asserts.RoslynAssert.ResetSuppressedDiagnostics() -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.Solution solution) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Generic.IReadOnlyList<string> code, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, string code, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(System.Type analyzerType, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(System.Type analyzerType, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(System.Type analyzerType, Microsoft.CodeAnalysis.Solution solution) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(System.Type analyzerType, System.IO.FileInfo code, System.Collections.Generic.IEnumerable<string> suppressWarnings = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions compilationOptions = null) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid(System.Type analyzerType, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid<TAnalyzer>(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, System.IO.FileInfo code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid<TAnalyzer>(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid<TAnalyzer>(Microsoft.CodeAnalysis.Solution solution) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid<TAnalyzer>(System.IO.FileInfo code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.Valid<TAnalyzer>(params string[] code) -> void
static Gu.Roslyn.Asserts.RoslynAssert.VerifyAnalyzerSupportsDiagnostic(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Gu.Roslyn.Asserts.ExpectedDiagnostic expectedDiagnostic) -> void
static Gu.Roslyn.Asserts.RoslynAssert.VerifyAnalyzerSupportsDiagnostic(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor) -> void
static Gu.Roslyn.Asserts.SolutionFile.Find(string name) -> System.IO.FileInfo
static Gu.Roslyn.Asserts.SolutionFile.ParseInfo(System.IO.FileInfo sln) -> Microsoft.CodeAnalysis.SolutionInfo
static Gu.Roslyn.Asserts.SolutionFile.TryFind(System.Reflection.Assembly assembly, out System.IO.FileInfo sln) -> bool
static Gu.Roslyn.Asserts.SolutionFile.TryFind(string name, out System.IO.FileInfo sln) -> bool
static Gu.Roslyn.Asserts.StringHelper.AssertReplace(this string text, string oldValue, string newValue) -> string
static Gu.Roslyn.Asserts.SuppressWarnings.FromAttributes() -> System.Collections.Immutable.ImmutableArray<string>
static Gu.Roslyn.Asserts.SyntaxFactoryWriter.Serialize(Microsoft.CodeAnalysis.SyntaxNode node) -> string
static Gu.Roslyn.Asserts.SyntaxFactoryWriter.Serialize(string code) -> string
static Gu.Roslyn.Asserts.SyntaxNodeExt.Find<T>(this Microsoft.CodeAnalysis.SyntaxNode root, string code) -> T
static Gu.Roslyn.Asserts.SyntaxNodeExt.Find<T>(this Microsoft.CodeAnalysis.SyntaxTree tree, string code) -> T
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindAccessorDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindArgument(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindAssignmentExpression(this Microsoft.CodeAnalysis.SyntaxTree tree, string code) -> Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindAttribute(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindAttributeArgument(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindBasePropertyDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindBinaryExpression(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindClassDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindConstructorDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindEqualsValueClause(this Microsoft.CodeAnalysis.SyntaxTree tree, string code) -> Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindEventDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindEventFieldDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindExpression(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindFieldDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindIndexerDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindInvocation(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindLiteralExpression(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindMemberAccessExpression(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindMethodDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindObjectCreationExpression(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindParameter(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindPropertyDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindStatement(this Microsoft.CodeAnalysis.SyntaxTree tree, string code) -> Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindStructDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindTypeDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax
static Gu.Roslyn.Asserts.SyntaxNodeExt.FindVariableDeclaration(this Microsoft.CodeAnalysis.SyntaxTree tree, string signature) -> Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
static Gu.Roslyn.Asserts.TextAssert.AreEqual(string expected, string actual) -> void
static readonly Gu.Roslyn.Asserts.AstWriterSettings.Default -> Gu.Roslyn.Asserts.AstWriterSettings
static readonly Gu.Roslyn.Asserts.AstWriterSettings.DefaultJson -> Gu.Roslyn.Asserts.AstWriterSettings
static readonly Gu.Roslyn.Asserts.CodeFactory.EmptySolution -> Microsoft.CodeAnalysis.Solution
static readonly Gu.Roslyn.Asserts.CodeFactory.Workspace -> Microsoft.CodeAnalysis.AdhocWorkspace
static readonly Gu.Roslyn.Asserts.RoslynAssert.MetadataReferences -> Gu.Roslyn.Asserts.MetadataReferencesCollection
static readonly Gu.Roslyn.Asserts.RoslynAssert.SuppressedDiagnostics -> System.Collections.Generic.List<string>