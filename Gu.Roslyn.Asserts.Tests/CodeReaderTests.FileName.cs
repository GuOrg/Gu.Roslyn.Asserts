namespace Gu.Roslyn.Asserts.Tests
{
    using NUnit.Framework;

    public partial class CodeReaderTests
    {
        public class FileName
        {
            [TestCase("class CodeReaderTests", "CodeReaderTests.cs")]
            [TestCase("class ↓CodeReaderTests", "CodeReaderTests.cs")]
            [TestCase("↓class CodeReaderTests", "CodeReaderTests.cs")]
            [TestCase("public class CodeReaderTests", "CodeReaderTests.cs")]
            [TestCase("internal class CodeReaderTests", "CodeReaderTests.cs")]
            [TestCase("internal static class CodeReaderTests", "CodeReaderTests.cs")]
            [TestCase("internal ↓static class CodeReaderTests", "CodeReaderTests.cs")]
            [TestCase("class CodeReaderTests<T>", "CodeReaderTests{T}.cs")]
            [TestCase("class CodeReaderTests<T1, T2>", "CodeReaderTests{T1,T2}.cs")]
            public void Class(string className, string expected)
            {
                var code = @"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RoslynSandbox
{
    class CodeReaderTests
    {
    }
}";
                code = code.AssertReplace("class CodeReaderTests", className);
                Assert.AreEqual(expected, CodeReader.FileName(code));
            }

            [Test]
            public void Resources()
            {
                var code = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoslynSandbox.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""System.Resources.Tools.StronglyTypedResourceBuilder"", ""15.0.0.0"")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(""Microsoft.Performance"", ""CA1811:AvoidUncalledPrivateCode"")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(""RoslynSandbox.Properties.Resources"", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value.
        /// </summary>
        public static string Key {
            get {
                return ResourceManager.GetString(""Key"", resourceCulture);
            }
        }
        internal static string Some_text => ResourceManager.GetString(""Some_text"", resourceCulture);
    }
}";
                Assert.AreEqual("Resources.cs", CodeReader.FileName(code));
            }

            [TestCase("IFoo", "IFoo.cs")]
            [TestCase("↓IFoo", "IFoo.cs")]
            [TestCase("IFoo<T>", "IFoo{T}.cs")]
            [TestCase("IFoo<↓T>", "IFoo{T}.cs")]
            [TestCase("IFoo<T1, T2>", "IFoo{T1,T2}.cs")]
            [TestCase("↓IFoo<↓T1, ↓T2>", "IFoo{T1,T2}.cs")]
            public void Interface(string className, string expected)
            {
                var code = @"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RoslynSandbox
{
    interface IFoo
    {
    }
}";
                code = code.AssertReplace("IFoo", className);
                Assert.AreEqual(expected, CodeReader.FileName(code));
            }

            [Test]
            public void Enum()
            {
                var code = @"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RoslynSandbox
{
    enum Foo
    {
    }
}";
                Assert.AreEqual("Foo.cs", CodeReader.FileName(code));
            }

            [Test]
            public void AssemblyInfo()
            {
                var code = @"using System.Reflection;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle(""Gu.Roslyn.Asserts.Tests"")]
[assembly: AssemblyDescription("""")]
[assembly: AssemblyConfiguration("""")]
[assembly: AssemblyCompany("""")]
[assembly: AssemblyProduct(""Gu.Roslyn.Asserts.Tests"")]
[assembly: AssemblyCopyright(""Copyright ©  2017"")]
[assembly: AssemblyTrademark("""")]
[assembly: AssemblyCulture("""")]

[assembly: ComVisible(false)]

[assembly: Guid(""34e6a491-5742-40e1-b1bf-f210d43dee1b"")]

// [assembly: AssemblyVersion(""1.0.*"")]
[assembly: AssemblyVersion(""1.0.0.0"")]
[assembly: AssemblyFileVersion(""1.0.0.0"")]
";

                Assert.AreEqual("AssemblyInfo.cs", CodeReader.FileName(code));
            }
        }
    }
}
